// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ImageBuilder.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Describes an image source that is an installation ISO. Currently only
    /// supports Red Hat Enterprise Linux 7.2-7.5 ISO's.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ISO")]
    public partial class ImageTemplateIsoSource : ImageTemplateSource
    {
        /// <summary>
        /// Initializes a new instance of the ImageTemplateIsoSource class.
        /// </summary>
        public ImageTemplateIsoSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageTemplateIsoSource class.
        /// </summary>
        /// <param name="sourceUri">URI to get the ISO image. This URI has to
        /// be accessible to the resource provider at the time of the image
        /// template creation.</param>
        /// <param name="sha256Checksum">SHA256 Checksum of the ISO
        /// image.</param>
        public ImageTemplateIsoSource(string sourceUri, string sha256Checksum)
        {
            SourceUri = sourceUri;
            Sha256Checksum = sha256Checksum;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets URI to get the ISO image. This URI has to be
        /// accessible to the resource provider at the time of the image
        /// template creation.
        /// </summary>
        [JsonProperty(PropertyName = "sourceUri")]
        public string SourceUri { get; set; }

        /// <summary>
        /// Gets or sets SHA256 Checksum of the ISO image.
        /// </summary>
        [JsonProperty(PropertyName = "sha256Checksum")]
        public string Sha256Checksum { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SourceUri");
            }
            if (Sha256Checksum == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sha256Checksum");
            }
        }
    }
}
