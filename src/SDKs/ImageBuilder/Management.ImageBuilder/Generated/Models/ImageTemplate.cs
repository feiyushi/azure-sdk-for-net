// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ImageBuilder.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Image template is an ARM resource managed by
    /// Microsoft.VirtualMachineImages provider
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ImageTemplate : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ImageTemplate class.
        /// </summary>
        public ImageTemplate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageTemplate class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="source">Specifies the properties used to describe the
        /// source image.</param>
        /// <param name="distribute">The distribution targets where the image
        /// output needs to go to.</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="customize">Specifies the properties used to describe
        /// the customization steps of the image, like Image source etc</param>
        /// <param name="provisioningState">Provisioning state of the resource.
        /// Possible values include: 'Creating', 'Updating', 'Succeeded',
        /// 'Failed', 'Deleting'</param>
        /// <param name="provisioningError">Provisioning error, if any</param>
        /// <param name="lastRunStatus">State of 'run' that is currently
        /// executing or was last executed.</param>
        /// <param name="buildTimeoutInMinutes">Maximum duration to wait while
        /// building the image template. Omit or specify 0 to use the default
        /// (4 hours).</param>
        /// <param name="vmProfile">Describes how virtual machine is set up to
        /// build images</param>
        /// <param name="identity">The identity of the image template, if
        /// configured.</param>
        public ImageTemplate(string location, ImageTemplateSource source, IList<ImageTemplateDistributor> distribute, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), IList<ImageTemplateCustomizer> customize = default(IList<ImageTemplateCustomizer>), ProvisioningState? provisioningState = default(ProvisioningState?), ProvisioningError provisioningError = default(ProvisioningError), ImageTemplateLastRunStatus lastRunStatus = default(ImageTemplateLastRunStatus), int? buildTimeoutInMinutes = default(int?), ImageTemplateVmProfile vmProfile = default(ImageTemplateVmProfile), ImageTemplateIdentity identity = default(ImageTemplateIdentity))
            : base(location, id, name, type, tags)
        {
            Source = source;
            Customize = customize;
            Distribute = distribute;
            ProvisioningState = provisioningState;
            ProvisioningError = provisioningError;
            LastRunStatus = lastRunStatus;
            BuildTimeoutInMinutes = buildTimeoutInMinutes;
            VmProfile = vmProfile;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the properties used to describe the source
        /// image.
        /// </summary>
        [JsonProperty(PropertyName = "properties.source")]
        public ImageTemplateSource Source { get; set; }

        /// <summary>
        /// Gets or sets specifies the properties used to describe the
        /// customization steps of the image, like Image source etc
        /// </summary>
        [JsonProperty(PropertyName = "properties.customize")]
        public IList<ImageTemplateCustomizer> Customize { get; set; }

        /// <summary>
        /// Gets or sets the distribution targets where the image output needs
        /// to go to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.distribute")]
        public IList<ImageTemplateDistributor> Distribute { get; set; }

        /// <summary>
        /// Gets provisioning state of the resource. Possible values include:
        /// 'Creating', 'Updating', 'Succeeded', 'Failed', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Gets provisioning error, if any
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningError")]
        public ProvisioningError ProvisioningError { get; private set; }

        /// <summary>
        /// Gets state of 'run' that is currently executing or was last
        /// executed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastRunStatus")]
        public ImageTemplateLastRunStatus LastRunStatus { get; private set; }

        /// <summary>
        /// Gets or sets maximum duration to wait while building the image
        /// template. Omit or specify 0 to use the default (4 hours).
        /// </summary>
        [JsonProperty(PropertyName = "properties.buildTimeoutInMinutes")]
        public int? BuildTimeoutInMinutes { get; set; }

        /// <summary>
        /// Gets or sets describes how virtual machine is set up to build
        /// images
        /// </summary>
        [JsonProperty(PropertyName = "properties.vmProfile")]
        public ImageTemplateVmProfile VmProfile { get; set; }

        /// <summary>
        /// Gets or sets the identity of the image template, if configured.
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public ImageTemplateIdentity Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Distribute == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Distribute");
            }
            if (Distribute != null)
            {
                foreach (var element in Distribute)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BuildTimeoutInMinutes > 960)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "BuildTimeoutInMinutes", 960);
            }
            if (BuildTimeoutInMinutes < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "BuildTimeoutInMinutes", 0);
            }
        }
    }
}
