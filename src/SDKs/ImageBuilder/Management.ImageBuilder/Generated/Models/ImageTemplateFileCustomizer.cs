// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ImageBuilder.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Uploads files to VMs (Linux, Windows). Corresponds to Packer file
    /// provisioner
    /// </summary>
    [Newtonsoft.Json.JsonObject("File")]
    public partial class ImageTemplateFileCustomizer : ImageTemplateCustomizer
    {
        /// <summary>
        /// Initializes a new instance of the ImageTemplateFileCustomizer
        /// class.
        /// </summary>
        public ImageTemplateFileCustomizer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImageTemplateFileCustomizer
        /// class.
        /// </summary>
        /// <param name="name">Friendly Name to provide context on what this
        /// customization step does</param>
        /// <param name="sourceUri">The URI of the file to be uploaded for
        /// customizing the VM. It can be a github link, SAS URI for Azure
        /// Storage, etc</param>
        /// <param name="destination">The absolute path (with existing
        /// directory structure) where the file will be uploaded to in the
        /// VM</param>
        public ImageTemplateFileCustomizer(string name = default(string), string sourceUri = default(string), string destination = default(string))
            : base(name)
        {
            SourceUri = sourceUri;
            Destination = destination;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the URI of the file to be uploaded for customizing the
        /// VM. It can be a github link, SAS URI for Azure Storage, etc
        /// </summary>
        [JsonProperty(PropertyName = "sourceUri")]
        public string SourceUri { get; set; }

        /// <summary>
        /// Gets or sets the absolute path (with existing directory structure)
        /// where the file will be uploaded to in the VM
        /// </summary>
        [JsonProperty(PropertyName = "destination")]
        public string Destination { get; set; }

    }
}
