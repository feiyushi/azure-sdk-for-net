// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ImageBuilder
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualMachineImageTemplatesOperations.
    /// </summary>
    public static partial class VirtualMachineImageTemplatesOperationsExtensions
    {
            /// <summary>
            /// Gets information about the VM image templates associated with the
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ImageTemplate> List(this IVirtualMachineImageTemplatesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ImageTemplate>> ListAsync(this IVirtualMachineImageTemplatesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static IPage<ImageTemplate> ListByResourceGroup(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ImageTemplate>> ListByResourceGroupAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateImageTemplate operation
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static ImageTemplate CreateOrUpdate(this IVirtualMachineImageTemplatesOperations operations, ImageTemplate parameters, string resourceGroupName, string imageTemplateName)
            {
                return operations.CreateOrUpdateAsync(parameters, resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateImageTemplate operation
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTemplate> CreateOrUpdateAsync(this IVirtualMachineImageTemplatesOperations operations, ImageTemplate parameters, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(parameters, resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the tags for this Virtual Machine Image Template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for Image Template update.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static ImageTemplate Update(this IVirtualMachineImageTemplatesOperations operations, ImageTemplateUpdateParameters parameters, string resourceGroupName, string imageTemplateName)
            {
                return operations.UpdateAsync(parameters, resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the tags for this Virtual Machine Image Template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for Image Template update.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTemplate> UpdateAsync(this IVirtualMachineImageTemplatesOperations operations, ImageTemplateUpdateParameters parameters, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(parameters, resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static ImageTemplate Get(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                return operations.GetAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTemplate> GetAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static void Delete(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                operations.DeleteAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create artifacts from a existing image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static void Run(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                operations.RunAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create artifacts from a existing image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RunAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RunWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all run outputs for the specified Image Template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static IPage<RunOutput> ListRunOutputs(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                return operations.ListRunOutputsAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all run outputs for the specified Image Template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RunOutput>> ListRunOutputsAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRunOutputsWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the specified run output for the specified image template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='runOutputName'>
            /// The name of the run output
            /// </param>
            public static RunOutput GetRunOutput(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, string runOutputName)
            {
                return operations.GetRunOutputAsync(resourceGroupName, imageTemplateName, runOutputName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the specified run output for the specified image template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='runOutputName'>
            /// The name of the run output
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunOutput> GetRunOutputAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, string runOutputName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRunOutputWithHttpMessagesAsync(resourceGroupName, imageTemplateName, runOutputName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateImageTemplate operation
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static ImageTemplate BeginCreateOrUpdate(this IVirtualMachineImageTemplatesOperations operations, ImageTemplate parameters, string resourceGroupName, string imageTemplateName)
            {
                return operations.BeginCreateOrUpdateAsync(parameters, resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateImageTemplate operation
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTemplate> BeginCreateOrUpdateAsync(this IVirtualMachineImageTemplatesOperations operations, ImageTemplate parameters, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(parameters, resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the tags for this Virtual Machine Image Template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for Image Template update.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static ImageTemplate BeginUpdate(this IVirtualMachineImageTemplatesOperations operations, ImageTemplateUpdateParameters parameters, string resourceGroupName, string imageTemplateName)
            {
                return operations.BeginUpdateAsync(parameters, resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the tags for this Virtual Machine Image Template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for Image Template update.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImageTemplate> BeginUpdateAsync(this IVirtualMachineImageTemplatesOperations operations, ImageTemplateUpdateParameters parameters, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(parameters, resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static void BeginDelete(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                operations.BeginDeleteAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a virtual machine image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create artifacts from a existing image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            public static void BeginRun(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName)
            {
                operations.BeginRunAsync(resourceGroupName, imageTemplateName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create artifacts from a existing image template
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='imageTemplateName'>
            /// The name of the image Template
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRunAsync(this IVirtualMachineImageTemplatesOperations operations, string resourceGroupName, string imageTemplateName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRunWithHttpMessagesAsync(resourceGroupName, imageTemplateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ImageTemplate> ListNext(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the
            /// subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ImageTemplate>> ListNextAsync(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ImageTemplate> ListByResourceGroupNext(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the VM image templates associated with the specified
            /// resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ImageTemplate>> ListByResourceGroupNextAsync(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all run outputs for the specified Image Template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RunOutput> ListRunOutputsNext(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink)
            {
                return operations.ListRunOutputsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all run outputs for the specified Image Template resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RunOutput>> ListRunOutputsNextAsync(this IVirtualMachineImageTemplatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRunOutputsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
