// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ImageBuilder.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RunState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RunState
    {
        [EnumMember(Value = "Running")]
        Running,
        [EnumMember(Value = "Canceling")]
        Canceling,
        [EnumMember(Value = "Succeeded")]
        Succeeded,
        [EnumMember(Value = "PartiallySucceeded")]
        PartiallySucceeded,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Canceled")]
        Canceled
    }
    internal static class RunStateEnumExtension
    {
        internal static string ToSerializedValue(this RunState? value)
        {
            return value == null ? null : ((RunState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RunState value)
        {
            switch( value )
            {
                case RunState.Running:
                    return "Running";
                case RunState.Canceling:
                    return "Canceling";
                case RunState.Succeeded:
                    return "Succeeded";
                case RunState.PartiallySucceeded:
                    return "PartiallySucceeded";
                case RunState.Failed:
                    return "Failed";
                case RunState.Canceled:
                    return "Canceled";
            }
            return null;
        }

        internal static RunState? ParseRunState(this string value)
        {
            switch( value )
            {
                case "Running":
                    return RunState.Running;
                case "Canceling":
                    return RunState.Canceling;
                case "Succeeded":
                    return RunState.Succeeded;
                case "PartiallySucceeded":
                    return RunState.PartiallySucceeded;
                case "Failed":
                    return RunState.Failed;
                case "Canceled":
                    return RunState.Canceled;
            }
            return null;
        }
    }
}
