// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Imagebuilder.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Distribute as a Managed Disk Image.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ManagedImage")]
    public partial class ImageTemplateManagedImageDistributor : ImageTemplateDistributor
    {
        /// <summary>
        /// Initializes a new instance of the
        /// ImageTemplateManagedImageDistributor class.
        /// </summary>
        public ImageTemplateManagedImageDistributor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// ImageTemplateManagedImageDistributor class.
        /// </summary>
        /// <param name="runOutputName">The name to be used for the associated
        /// RunOutput.</param>
        /// <param name="imageId">Resource Id of the Managed Disk Image</param>
        /// <param name="location">Azure location for the image, should match
        /// if image already exists</param>
        /// <param name="artifactTags">Tags that will be applied to the
        /// artifact once it has been created/updated by the
        /// distributor.</param>
        public ImageTemplateManagedImageDistributor(string runOutputName, string imageId, string location, IDictionary<string, string> artifactTags = default(IDictionary<string, string>))
            : base(runOutputName, artifactTags)
        {
            ImageId = imageId;
            Location = location;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource Id of the Managed Disk Image
        /// </summary>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <summary>
        /// Gets or sets azure location for the image, should match if image
        /// already exists
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ImageId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImageId");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }
    }
}
